public interface MarketDataMmapAccessable {
    public Long getTimestamp(ByteBuffer, Integer);
    public Long getTimestamp(ByteBuffer);
    public Long putTimestamp(ByteBuffer, Long, Integer);
    public Long putTimestamp(ByteBuffer, Long);
    public Integer lengthTimestamp();
    public Integer offsetTimestamp();
    public Integer positionTimestamp(Integer);
    public Long getQuoteTime(ByteBuffer, Integer);
    public Long getQuoteTime(ByteBuffer);
    public Long putQuoteTime(ByteBuffer, Long, Integer);
    public Long putQuoteTime(ByteBuffer, Long);
    public Integer lengthQuoteTime();
    public Integer offsetQuoteTime();
    public Integer positionQuoteTime(Integer);
    public Long getTradeTime(ByteBuffer, Integer);
    public Long getTradeTime(ByteBuffer);
    public Long putTradeTime(ByteBuffer, Long, Integer);
    public Long putTradeTime(ByteBuffer, Long);
    public Integer lengthTradeTime();
    public Integer offsetTradeTime();
    public Integer positionTradeTime(Integer);
    public Object getQuoteCondition(ByteBuffer, Integer);
    public Object getQuoteCondition(ByteBuffer);
    public Object putQuoteCondition(ByteBuffer, Object, Integer);
    public Object putQuoteCondition(ByteBuffer, Object);
    public Integer lengthQuoteCondition();
    public Integer offsetQuoteCondition();
    public Integer positionQuoteCondition(Integer);
    public Object getTradeCondition(ByteBuffer, Integer);
    public Object getTradeCondition(ByteBuffer);
    public Object putTradeCondition(ByteBuffer, Object, Integer);
    public Object putTradeCondition(ByteBuffer, Object);
    public Integer lengthTradeCondition();
    public Integer offsetTradeCondition();
    public Integer positionTradeCondition(Integer);
    public Float getBid(ByteBuffer, Integer);
    public Float getBid(ByteBuffer);
    public Float putBid(ByteBuffer, Float, Integer);
    public Float putBid(ByteBuffer, Float);
    public Integer lengthBid();
    public Integer offsetBid();
    public Integer positionBid(Integer);
    public Float getAsk(ByteBuffer, Integer);
    public Float getAsk(ByteBuffer);
    public Float putAsk(ByteBuffer, Float, Integer);
    public Float putAsk(ByteBuffer, Float);
    public Integer lengthAsk();
    public Integer offsetAsk();
    public Integer positionAsk(Integer);
    public Float getLast(ByteBuffer, Integer);
    public Float getLast(ByteBuffer);
    public Float putLast(ByteBuffer, Float, Integer);
    public Float putLast(ByteBuffer, Float);
    public Integer lengthLast();
    public Integer offsetLast();
    public Integer positionLast(Integer);
    public Integer getBidSize(ByteBuffer, Integer);
    public Integer getBidSize(ByteBuffer);
    public Integer putBidSize(ByteBuffer, Integer, Integer);
    public Integer putBidSize(ByteBuffer, Integer);
    public Integer lengthBidSize();
    public Integer offsetBidSize();
    public Integer positionBidSize(Integer);
    public Integer getAskSize(ByteBuffer, Integer);
    public Integer getAskSize(ByteBuffer);
    public Integer putAskSize(ByteBuffer, Integer, Integer);
    public Integer putAskSize(ByteBuffer, Integer);
    public Integer lengthAskSize();
    public Integer offsetAskSize();
    public Integer positionAskSize(Integer);
    public Integer getLastSize(ByteBuffer, Integer);
    public Integer getLastSize(ByteBuffer);
    public Integer putLastSize(ByteBuffer, Integer, Integer);
    public Integer putLastSize(ByteBuffer, Integer);
    public Integer lengthLastSize();
    public Integer offsetLastSize();
    public Integer positionLastSize(Integer);
    public Float getVwap(ByteBuffer, Integer);
    public Float getVwap(ByteBuffer);
    public Float putVwap(ByteBuffer, Float, Integer);
    public Float putVwap(ByteBuffer, Float);
    public Integer lengthVwap();
    public Integer offsetVwap();
    public Integer positionVwap(Integer);
    public Object getCondition(ByteBuffer, Integer);
    public Object getCondition(ByteBuffer);
    public Object putCondition(ByteBuffer, Object, Integer);
    public Object putCondition(ByteBuffer, Object);
    public Integer lengthCondition();
    public Integer offsetCondition();
    public Integer positionCondition(Integer);
    public Long getTotalAmount(ByteBuffer, Integer);
    public Long getTotalAmount(ByteBuffer);
    public Long putTotalAmount(ByteBuffer, Long, Integer);
    public Long putTotalAmount(ByteBuffer, Long);
    public Integer lengthTotalAmount();
    public Integer offsetTotalAmount();
    public Integer positionTotalAmount(Integer);
    public Integer getVolume(ByteBuffer, Integer);
    public Integer getVolume(ByteBuffer);
    public Integer putVolume(ByteBuffer, Integer, Integer);
    public Integer putVolume(ByteBuffer, Integer);
    public Integer lengthVolume();
    public Integer offsetVolume();
    public Integer positionVolume(Integer);
    public Object getCurrency(ByteBuffer, Integer);
    public Object getCurrency(ByteBuffer);
    public Object putCurrency(ByteBuffer, Object, Integer);
    public Object putCurrency(ByteBuffer, Object);
    public Integer lengthCurrency();
    public Integer offsetCurrency();
    public Integer positionCurrency(Integer);
    public Long getLatency(ByteBuffer, Integer);
    public Long getLatency(ByteBuffer);
    public Long putLatency(ByteBuffer, Long, Integer);
    public Long putLatency(ByteBuffer, Long);
    public Integer lengthLatency();
    public Integer offsetLatency();
    public Integer positionLatency(Integer);
    public Long getInternalLatency(ByteBuffer, Integer);
    public Long getInternalLatency(ByteBuffer);
    public Long putInternalLatency(ByteBuffer, Long, Integer);
    public Long putInternalLatency(ByteBuffer, Long);
    public Integer lengthInternalLatency();
    public Integer offsetInternalLatency();
    public Integer positionInternalLatency(Integer);
    public String getSymbol(ByteBuffer, Integer);
    public String getSymbol(ByteBuffer);
    public String putSymbol(ByteBuffer, String, Integer);
    public String putSymbol(ByteBuffer, String);
    public Integer lengthSymbol();
    public Integer offsetSymbol();
    public Integer positionSymbol(Integer);
}

