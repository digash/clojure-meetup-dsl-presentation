#### Copyright (c) 2010 Dimitry Gashinsky. All rights reserved.
####
#### Author: Dimitry Gashinsky (dimitry :at gashinsky :dot com)
#### Id: FA20F194-3FA8-4393-B7F4-A5A89212CF40
#+STARTUP: beamer
#+LaTeX_CLASS: beamer
#+MACRO: BEAMERMODE presentation
#+MACRO: BEAMERTHEME Pittsburgh
#+MACRO: BEAMERCOLORTHEME seahorse
#+MACRO: BEAMERSUBJECT DSL Clojure
#+MACRO: BEAMERINSTITUTE Pico Quantitative Trading LLC.
#+TITLE: Embedded Domain Specific Languages in Clojure
#+AUTHOR: Dimitry Gashinsky (@digash)

* Introduction

** Who am I? _vanity
*** Used to be by day
    - Coder for financial, security and technology industries.

*** Used to be at night
    - Lisp enthusiast and computational philosopher.

*** Now in twilight
    - VP of engineering for Pico Quantitative Trading, which includes
      all of the above.

** My First Lisp and DSL exposure. _history
    #+CAPTION:    R-LISP Book (1991)
    #+LABEL:      fig:r-lisp-book
    #+ATTR_LaTeX: width=0.4\textwidth
    [[file:r-lisp-book.png]]

** REDUCE
*** To symbolically solve
##+BEGIN_LaTeX
    \begin{equation}
    \int_0^y \! cos(2x) \, dx.
    \end{equation}
##+END_LaTeX

*** Start REDUCE REPL
#+BEGIN_EXAMPLE
    Reduce (Free CSL version), 18-Aug-10 ...

    1: int(cos(2x),x,y,2y);

    sin(4*y) - sin(2*y)
   ---------------------
             2
#+END_EXAMPLE

*** MAGIC !

* Main Part

** Definition of embedded (a.k.a. internal[fn:1]) DSL
*** Enumerating some of the important attributes
    1. targeted towards specific problem
    2. limited in the scope as oppose to general purpose language
    3. usually not turing complete
    4. self-documenting

** Definition of embedded DSL _continue
*** Enumerating more of the important attributes
    1. bottom-up design[fn:2]
    2. parasitic in its nature
       - feeds on host abstract syntax tree (AST)
       - hides in the host's syntax
       - reproduces more quickly and in greater numbers than its hosts

** Motivation for DSL
*** When in need of wisdom use a good book^\ref{fig:sicp}
    #+CAPTION:    Structure and Interpretation of Computer Programs
    #+LABEL:      fig:sicp
    #+ATTR_LaTeX: width=0.4\textwidth
    [[file:sicp.png]]

** Metalinguistic Abstraction (a.k.a. DSL)
*** Establishing new languages
    1. a powerful strategy for controlling complexity
    2. particularly important to computer programming, because we can
       implement these languages

** Implementing languages is not that scary _encouragement
#+BEGIN_QUOTE
    "The evaluator [or compiler], which determines the meaning of
    expressions in a programming language, is just another program."
#+END_QUOTE

** Maxwellâ€™s Equations of Software! -- Alan Kay _inspiration
    #+CAPTION:    LISP 1.5 Programmer Manual page 13
    #+LABEL:      fig:lisp-1.5-p13
    #+ATTR_LaTeX: width=0.4\textwidth
    [[file:lisp-1_5-p13.png]]

** Why Rich should have all the fn?
#+BEGIN_QUOTE
    "We come to see ourselves as designers of languages, rather
    than only users of languages designed by others."
#+END_QUOTE

#+BEGIN_QUOTE
    "... computer science itself becomes no more (and no less) than
    the discipline of constructing appropriate descriptive languages."
#+END_QUOTE

** Clojure is an excellent host
*** Short list of features useful for DSLs:
  - =fn #()=
  - unquote and unquote-splicing
  - code as data
  - macrology

** Some of DSLs that we wrote
*** configuration language
*** market data message specification
*** mmap file buffer to records mapping

** Market Data Message Specification
   #+CAPTION:    One small piece of huge spec
   #+LABEL:      fig:message-spec
   #+ATTR_LaTeX: width=1.0\textwidth
   [[file:message-spec.png]]

** Market Data Message Description Language
#+BEGIN_SRC clojure
(defmessage PacketHeader
  [SequenceNumber    8 :numeric
   "The sequence number of the first message in
   the packet. If the packet contains more than
   one message, subsequent message sequence numbers
   are derived implicitly."]
  [MessageCount      2 :numeric
   "The number of message blocks contained in
   the packet."]
  [SessionIdentifier 1 :alphanumeric
   "Number of the current daily session. This field
   will begin as 0 and increment thereafter if the
   feed is restarted during the trading day."])
#+END_SRC

** Some of the generated code for the message spec
#+BEGIN_SRC clojure
(defrecord PacketHeader [buffer offset]
  Sizable
  (length [this] 16)
  PacketHeaderAccessor
  (getSequenceNumber
   [this]
   (parse-numeric buffer (+ (int offset) (int 0)) 8))
  (lengthSequenceNumber [this] 8)
  (offsetSequenceNumber [this] 0)
  (positionSequenceNumber [this] (+ offset 0))
;; ...
  (lengthMessageCount [this] 2)
  (getSessionIdentifier
   [this]           ; 8 + 2 = 10 bytes offset
   (parse-alphanumeric buffer (+ (int offset) (int 10)) 1))
   (offsetSessionIdentifier [this] 10)
   (positionSessionIdentifier [this] (+ offset 10)))
#+END_SRC

** Implementation of defmessage
#+BEGIN_SRC clojure
(defmacro defmessage [name & fields]
  (emit-message name fields))
#+END_SRC

** Implementation of defmessage _continue
#+BEGIN_SRC clojure
(defn- emit-message [name fields]
  (let [reader-name (symbol (str name "Accessor"))
        buffer-symbol 'buffer
        offset-symbol 'offset]
    `(do
       (definterface ~reader-name
         ~@(emit-message-signatures fields))
       (defrecord ~name [^ByteBuffer ~buffer-symbol
                         ^int ~offset-symbol]
         Sizable (length [~'this] ~(emit-length fields))
         ~reader-name
         ~@(emit-message-methods fields buffer-symbol
                                 offset-symbol))
       (deftype ~(symbol (str name "Parser")) []
         Parsable   ; just wrap it
         (parse [~'this ~buffer-symbol ~offset-symbol]
                (new ~name ~buffer-symbol ~offset-symbol)))

       (.addMethod pp/code-dispatch ~name pprint-message)
       (.addMethod pp/simple-dispatch ~name pprint-message))))
#+END_SRC

** Implementation of defmessage _continue
#+BEGIN_SRC clojure
(defn- emit-type [format length]
  ({:numeric ({1 Short
               2 Integer
               4 Long
               8 BigInteger} length)
    :alpha String
    :alphanumeric Long
    :mixed parser/byte-array-type} format))
#+END_SRC

** Implementation of defmessage _continue
#+BEGIN_SRC clojure
(defn- emit-message-method-name [p n]
  (symbol (str p (name n))))

(defn- emit-message-signatures [fields]
  (mapcat
     (fn [[n l f c]]
       [`(~(with-meta (emit-message-method-name "get" n)
             {:tag (emit-type f l)}) [] ~c)
;; ...
        `(~(with-meta (emit-message-method-name "pos" n)
             {:tag Integer}) []
             "Position of field in the buffer.")])
     fields))
#+END_SRC

** Memory Map Description Language
#+BEGIN_SRC clojure
(defmmap MarketDataMmap
  [Timestamp       8 :integer]
  [TradeTime       8 :integer]
  [QuoteCondition  4 :character]
  [TradeCondition  4 :character]
  [Bid             4 :decimal]
  [Ask             4 :decimal]
  [Last            4 :decimal]
  [BidSize         4 :integer]
  [AskSize         4 :integer]
  [LastSize        4 :integer]
  [TotalAmount     8 :integer]
  [Volume          4 :integer]
  [Currency        3 :character]
  [Latency         8 :integer]
  [Symbol         12 :string])
#+END_SRC

** Macroexpanded defmmap
   #+CAPTION:    defmmap macroexpanded
   #+LABEL:      fig:defmmap-macroexpand
   #+ATTR_LaTeX: width=1.0\textwidth
   [[file:defmmap-macroexpand.png]]

** Get a Java API too
#+ATTR_LaTeX: width=1.0\textwidth
#+BEGIN_DITAA java-class-diagram.png --scale 2.5 -no-separation --no-shadows
/-----------------------------------------------\
| <<MmapAccessable>>                            |              +----------------------+
+-----------------------------------------------+              | MmapAccessor         |
| Long getTimestamp(ByteBuffer, Integer);       |              +----------------------+
| Long getTimestamp(ByteBuffer);                |              | getTimestamp(...)    |
| Long putTimestamp(ByteBuffer, Long, Integer); |  implements  | putTimestamp(...)    |
| Long putTimestamp(ByteBuffer, Long);          |<-------------| lengthTimestamp(...) |
| Integer lengthTimestamp();                    |              | offsetTimestamp(...) |
| Integer offsetTimestamp();                    |              | ... {d}              |
| Integer positionTimestamp(Integer);           |              +----------------------+
| ... {d}                                       |              
\-----------------------------------------------/
#+END_DITAA

** Memory Map Accessable Java API
#+INCLUDE: "MarketDataMmapAccessable.java" src java

** Memory Map Accessor Java API
#+INCLUDE: "MarketDataMmapAccessor.java" src java

* Questions

** Questions

*** Questions?

*** mailto:dimitry@gashinsky.com
*** twitter:@digash
*** xmpp:i@digash.com
*** http://blog.digash.com

* Footnotes

[fn:1] [[http://martinfowler.com/articles/languageWorkbench.html][Language Workbenches: The Killer-App for Domain Specific Languages?]]
[fn:2] [[http://www.paulgraham.com/progbot.html][Programming Bottom-Up]]

# LocalWords:  SICP
