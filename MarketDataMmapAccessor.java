public final class com.picotrading.tech.madase.mmap.MarketDataMmapAccessor extends java.lang.Object implements com.picotrading.tech.madase.mmap.MarketDataMmapAccessable,com.picotrading.tech.madase.record.Sizable,clojure.lang.IObj,clojure.lang.ILookup,clojure.lang.IKeywordLookup,clojure.lang.IPersistentMap,java.util.Map,java.io.Serializable{
    public com.picotrading.tech.madase.mmap.MarketDataMmapAccessor(java.lang.Object, java.lang.Object);
    public com.picotrading.tech.madase.mmap.MarketDataMmapAccessor();
    public java.lang.Object length();
    public java.lang.Integer positionSymbol(java.lang.Integer);
    public java.lang.Integer offsetSymbol();
    public java.lang.Integer lengthSymbol();
    public java.lang.String putSymbol(java.nio.ByteBuffer, java.lang.String);
    public java.lang.String putSymbol(java.nio.ByteBuffer, java.lang.String, java.lang.Integer);
    public java.lang.String getSymbol(java.nio.ByteBuffer);
    public java.lang.String getSymbol(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionInternalLatency(java.lang.Integer);
    public java.lang.Integer offsetInternalLatency();
    public java.lang.Integer lengthInternalLatency();
    public java.lang.Long putInternalLatency(java.nio.ByteBuffer, java.lang.Long);
    public java.lang.Long putInternalLatency(java.nio.ByteBuffer, java.lang.Long, java.lang.Integer);
    public java.lang.Long getInternalLatency(java.nio.ByteBuffer);
    public java.lang.Long getInternalLatency(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionLatency(java.lang.Integer);
    public java.lang.Integer offsetLatency();
    public java.lang.Integer lengthLatency();
    public java.lang.Long putLatency(java.nio.ByteBuffer, java.lang.Long);
    public java.lang.Long putLatency(java.nio.ByteBuffer, java.lang.Long, java.lang.Integer);
    public java.lang.Long getLatency(java.nio.ByteBuffer);
    public java.lang.Long getLatency(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionCurrency(java.lang.Integer);
    public java.lang.Integer offsetCurrency();
    public java.lang.Integer lengthCurrency();
    public java.lang.Object putCurrency(java.nio.ByteBuffer, java.lang.Object);
    public java.lang.Object putCurrency(java.nio.ByteBuffer, java.lang.Object, java.lang.Integer);
    public java.lang.Object getCurrency(java.nio.ByteBuffer);
    public java.lang.Object getCurrency(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionVolume(java.lang.Integer);
    public java.lang.Integer offsetVolume();
    public java.lang.Integer lengthVolume();
    public java.lang.Integer putVolume(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer putVolume(java.nio.ByteBuffer, java.lang.Integer, java.lang.Integer);
    public java.lang.Integer getVolume(java.nio.ByteBuffer);
    public java.lang.Integer getVolume(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionTotalAmount(java.lang.Integer);
    public java.lang.Integer offsetTotalAmount();
    public java.lang.Integer lengthTotalAmount();
    public java.lang.Long putTotalAmount(java.nio.ByteBuffer, java.lang.Long);
    public java.lang.Long putTotalAmount(java.nio.ByteBuffer, java.lang.Long, java.lang.Integer);
    public java.lang.Long getTotalAmount(java.nio.ByteBuffer);
    public java.lang.Long getTotalAmount(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionCondition(java.lang.Integer);
    public java.lang.Integer offsetCondition();
    public java.lang.Integer lengthCondition();
    public java.lang.Object putCondition(java.nio.ByteBuffer, java.lang.Object);
    public java.lang.Object putCondition(java.nio.ByteBuffer, java.lang.Object, java.lang.Integer);
    public java.lang.Object getCondition(java.nio.ByteBuffer);
    public java.lang.Object getCondition(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionVwap(java.lang.Integer);
    public java.lang.Integer offsetVwap();
    public java.lang.Integer lengthVwap();
    public java.lang.Float putVwap(java.nio.ByteBuffer, java.lang.Float);
    public java.lang.Float putVwap(java.nio.ByteBuffer, java.lang.Float, java.lang.Integer);
    public java.lang.Float getVwap(java.nio.ByteBuffer);
    public java.lang.Float getVwap(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionLastSize(java.lang.Integer);
    public java.lang.Integer offsetLastSize();
    public java.lang.Integer lengthLastSize();
    public java.lang.Integer putLastSize(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer putLastSize(java.nio.ByteBuffer, java.lang.Integer, java.lang.Integer);
    public java.lang.Integer getLastSize(java.nio.ByteBuffer);
    public java.lang.Integer getLastSize(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionAskSize(java.lang.Integer);
    public java.lang.Integer offsetAskSize();
    public java.lang.Integer lengthAskSize();
    public java.lang.Integer putAskSize(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer putAskSize(java.nio.ByteBuffer, java.lang.Integer, java.lang.Integer);
    public java.lang.Integer getAskSize(java.nio.ByteBuffer);
    public java.lang.Integer getAskSize(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionBidSize(java.lang.Integer);
    public java.lang.Integer offsetBidSize();
    public java.lang.Integer lengthBidSize();
    public java.lang.Integer putBidSize(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer putBidSize(java.nio.ByteBuffer, java.lang.Integer, java.lang.Integer);
    public java.lang.Integer getBidSize(java.nio.ByteBuffer);
    public java.lang.Integer getBidSize(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionLast(java.lang.Integer);
    public java.lang.Integer offsetLast();
    public java.lang.Integer lengthLast();
    public java.lang.Float putLast(java.nio.ByteBuffer, java.lang.Float);
    public java.lang.Float putLast(java.nio.ByteBuffer, java.lang.Float, java.lang.Integer);
    public java.lang.Float getLast(java.nio.ByteBuffer);
    public java.lang.Float getLast(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionAsk(java.lang.Integer);
    public java.lang.Integer offsetAsk();
    public java.lang.Integer lengthAsk();
    public java.lang.Float putAsk(java.nio.ByteBuffer, java.lang.Float);
    public java.lang.Float putAsk(java.nio.ByteBuffer, java.lang.Float, java.lang.Integer);
    public java.lang.Float getAsk(java.nio.ByteBuffer);
    public java.lang.Float getAsk(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionBid(java.lang.Integer);
    public java.lang.Integer offsetBid();
    public java.lang.Integer lengthBid();
    public java.lang.Float putBid(java.nio.ByteBuffer, java.lang.Float);
    public java.lang.Float putBid(java.nio.ByteBuffer, java.lang.Float, java.lang.Integer);
    public java.lang.Float getBid(java.nio.ByteBuffer);
    public java.lang.Float getBid(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionTradeCondition(java.lang.Integer);
    public java.lang.Integer offsetTradeCondition();
    public java.lang.Integer lengthTradeCondition();
    public java.lang.Object putTradeCondition(java.nio.ByteBuffer, java.lang.Object);
    public java.lang.Object putTradeCondition(java.nio.ByteBuffer, java.lang.Object, java.lang.Integer);
    public java.lang.Object getTradeCondition(java.nio.ByteBuffer);
    public java.lang.Object getTradeCondition(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionQuoteCondition(java.lang.Integer);
    public java.lang.Integer offsetQuoteCondition();
    public java.lang.Integer lengthQuoteCondition();
    public java.lang.Object putQuoteCondition(java.nio.ByteBuffer, java.lang.Object);
    public java.lang.Object putQuoteCondition(java.nio.ByteBuffer, java.lang.Object, java.lang.Integer);
    public java.lang.Object getQuoteCondition(java.nio.ByteBuffer);
    public java.lang.Object getQuoteCondition(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionTradeTime(java.lang.Integer);
    public java.lang.Integer offsetTradeTime();
    public java.lang.Integer lengthTradeTime();
    public java.lang.Long putTradeTime(java.nio.ByteBuffer, java.lang.Long);
    public java.lang.Long putTradeTime(java.nio.ByteBuffer, java.lang.Long, java.lang.Integer);
    public java.lang.Long getTradeTime(java.nio.ByteBuffer);
    public java.lang.Long getTradeTime(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionQuoteTime(java.lang.Integer);
    public java.lang.Integer offsetQuoteTime();
    public java.lang.Integer lengthQuoteTime();
    public java.lang.Long putQuoteTime(java.nio.ByteBuffer, java.lang.Long);
    public java.lang.Long putQuoteTime(java.nio.ByteBuffer, java.lang.Long, java.lang.Integer);
    public java.lang.Long getQuoteTime(java.nio.ByteBuffer);
    public java.lang.Long getQuoteTime(java.nio.ByteBuffer, java.lang.Integer);
    public java.lang.Integer positionTimestamp(java.lang.Integer);
    public java.lang.Integer offsetTimestamp();
    public java.lang.Integer lengthTimestamp();
    public java.lang.Long putTimestamp(java.nio.ByteBuffer, java.lang.Long);
    public java.lang.Long putTimestamp(java.nio.ByteBuffer, java.lang.Long, java.lang.Integer);
    public java.lang.Long getTimestamp(java.nio.ByteBuffer);
    public java.lang.Long getTimestamp(java.nio.ByteBuffer, java.lang.Integer);
    public int hashCode();
    public boolean equals(java.lang.Object);
    public clojure.lang.IPersistentMap meta();
    public clojure.lang.IObj withMeta(clojure.lang.IPersistentMap);
    public java.lang.Object valAt(java.lang.Object);
    public java.lang.Object valAt(java.lang.Object, java.lang.Object);
    public clojure.lang.ILookupThunk getLookupThunk(clojure.lang.Keyword);
    public int count();
    public clojure.lang.IPersistentCollection empty();
    public clojure.lang.IPersistentCollection cons(java.lang.Object);
    public boolean equiv(java.lang.Object);
    public boolean containsKey(java.lang.Object);
    public clojure.lang.IMapEntry entryAt(java.lang.Object);
    public clojure.lang.ISeq seq();
    public clojure.lang.IPersistentMap assoc(java.lang.Object, java.lang.Object);
    public clojure.lang.IPersistentMap without(java.lang.Object)       throws java.lang.Exception;
    public int size();
    public boolean isEmpty();
    public boolean containsValue(java.lang.Object);
    public java.lang.Object get(java.lang.Object);
    public java.lang.Object put(java.lang.Object, java.lang.Object);
    public java.lang.Object remove(java.lang.Object);
    public void putAll(java.util.Map);
    public void clear();
    public java.util.Set keySet();
    public java.util.Collection values();
    public java.util.Set entrySet();
    public clojure.lang.Associative assoc(java.lang.Object, java.lang.Object)       throws java.lang.Exception;
}

